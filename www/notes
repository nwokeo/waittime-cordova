on load:
1. init globals
    var map;
    var geocoder;
    var bounds = new google.maps.LatLngBounds();
    var markersArray = [];
    var origin = '90026';
    var destinations = [];
    var destAddrs = [];
    var destCoords = [];
    var times = [];
    var officeUrl = '';
2. ajax: populate dest array, times array
3. google.maps.event.addDomListener(window, 'load', initialize);

    

on click:
1. callHaversine(origin) # origin = location string
2. haversineTest(origin, destinations) #destinations = array of destination objects
    3. codeAddress(origin, computeDist callback) #computeDist (made up name) trims dest array to 20 closest.
    #feels wrong to update a global object?
        4. calculateDistances(origin)
            5. callback(response, status) #if DistanceMatrixService success
                6. deleteOverlays()
                7. addMarker(origins[i], false) #add origin marker
                8 - 12. addMarker(originResults[j].destination, true) #add 5 dest markers 

order of events:
1. page load
2. ajax: populate dest array, times array
3. google.maps.event.addDomListener(window, 'load', initialize); #???
4. click
    5. geocode origin addr 
    6. get 20 closest dest, based on input
    7. get 5 smallest driving distance + wait time
    8. update map, table
    

data arrays:
1. ajax on load: (same order)
    destinations = { address, coords[] }
    names = names
    times = non appt times
2. haversineTest
    destinations = { address, coords[] } (top 20, sorted by haversine distance)
    destAddrs = addresses[] (top 20, sorted by haversine distance)
3. calculateDistances callback
    destinations = addresses [] (properly geocoded, from distanceMatrix service). same order as destAddrs above

export JAVA_HOME=/usr/lib/jvm/java-7-openjdk-amd64
export ANDROID_HOME=/home/pg-dev/Downloads/android-sdk-linux
export PATH=${PATH}:/home/pg-dev/Downloads/android-sdk-linux/platform-tools:/home/pg-dev/Downloads/android-sdk-linux/tools
export PATH=${PATH}:%ANT_HOME%\bin
phonegap build android